@model PaginatedList<BDMPro.Models.DeviceTypeViewModel>
@using BDMPro.Resources
@{
    string sort = ViewData["CurrentSort"].ToString();
    int calculatedFrom = (Model.PageIndex - 1) * Model.PageSize + 1;
    int calculatedTo = (Model.PageIndex - 1) * Model.PageSize + Model.PageSize;
    int displayFrom = Model.TotalItems == 0 ? 0 : calculatedFrom;
    int displayTo = (calculatedTo) > Model.TotalItems ? Model.TotalItems : (calculatedTo);
}
<div id="-table-wrapper">
    <div class="table-responsive overflow-auto">
        <table id="-table" class="table table-hover align-middle mb-0">
            <thead class="table-light">
                <tr>
                    @foreach (var item in Model.ColumnHeaders)
                    {
                        @if (item.Key != "Actions")
                        {
                            <th class="thead">
                                <a class="d-flex justify-content-between align-items-center cursor-pointer" onclick="sortTable('@item.OrderAction')">
                                    <span>@item.Title</span>
                                    <i class="fa-solid fs-12 text-muted @(sort.Contains(item.Key.ToString())? sort.Contains("asc")? "fa-arrow-up-wide-short": sort.Contains("desc")? "fa-arrow-down-wide-short": "": "")"></i>
                                </a>
                            </th>
                        }
                        else
                        {
                            <th class="thead notexport">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>@item.Title</span>
                                    <i class="fa-solid fa-circle-info text-info ps-2" data-bs-toggle="tooltip" data-bs-placement="right" title="@Resource.RegisteredUserStatusCannotBeDeletedOrEdited"></i>
                                </div>
                            </th>
                        }
                    }
                </tr>
            </thead>
            <tbody>
                @if (Model.TotalItems == 0)
                {
                        <tr>
                            <td class="text-center" colspan="@Model.ColumnHeaders.Count">@Resource.NoDataAvailable</td>
                        </tr>
                }
                else
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td><a class="fw600 color-primarycolor hover-color-secondarycolor" href="@Url.Action("viewrecord", new { Id = @Html.ValueFor(modelItem => item.TypId) })">@item.TypeName</a></td>
                            <td>
                                <div class="d-flex text-breakspaces actioncol">
                                    @if (item.SystemDefault == false)
                                    {
                                        <span class="fs-20 canedit"><a href="@Url.Action("edit", new { Id = @Html.ValueFor(modelItem => item.Id) })"><i class="fa-solid fa-edit text-edit hover-color-secondarycolor" data-bs-toggle="tooltip" data-bs-placement="top" title="@Resource.Edit"></i></a> &nbsp;</span>
                                        <span class="fs-20 candelete" onclick="triggerDeleteConfirmationModal('@Html.Raw(item.TypeName.Replace("'", "\\&#39;").Replace("\"", "\\&#34;"))','@Url.Action("delete", new { id= item.Id})')"><i class="fa-solid fa-trash-can text-delete hover-color-secondarycolor cursor-pointer" data-bs-toggle="tooltip" data-bs-placement="top" title="@Resource.Delete"></i></span>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    @await Html.PartialAsync("~/Views/Shared/_Paging.cshtml", new ViewDataDictionary(ViewData) {
    { "ShowingFrom", displayFrom }, { "ShowingTo", displayTo },
    { "TotalItems", Model.TotalItems }, { "HasPreviousPage", Model.HasPreviousPage }, { "PageIndex", Model.PageIndex },
    { "TotalPages", Model.TotalPages }, { "HasNextPage", Model.HasNextPage }
    })
</div>

<script>
    var tableWrapper = document.getElementById("-table-wrapper");
    var table = document.getElementById("-table");
    var tableDropDown = document.getElementById("-tableDropDown");
    if (tableWrapper != null) {
        tableWrapper.id = tableIdPrefix + "-table-wrapper";
    }
    if (table != null) {
        table.id = tableIdPrefix + "-table";
    }
    if (tableDropDown != null) {
        tableDropDown.id = tableIdPrefix + "-tableDropDown";
    }

    if (canEdit == 'False') {
        $('#' + tableIdPrefix + '-table .canedit').hide();
    }
    if (canDelete == 'False') {
        $('#' + tableIdPrefix + '-table .candelete').hide();
    }

    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    });
</script>
