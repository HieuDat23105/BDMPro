@model PaginatedList<BDMPro.Models.SupplierViewModel>
@using BDMPro.CustomHelper
@using BDMPro.Resources
@{
    string sort = ViewData["CurrentSort"].ToString();
    int calculatedFrom = (Model.PageIndex - 1) * Model.PageSize + 1;
    int calculatedTo = (Model.PageIndex - 1) * Model.PageSize + Model.PageSize;
    int displayFrom = Model.TotalItems == 0 ? 0 : calculatedFrom;
    int displayTo = (calculatedTo) > Model.TotalItems ? Model.TotalItems : (calculatedTo);
    string lockedColumnWidth = "100px";
}

<div id="supplier-table-wrapper">
    <div class="table-responsive overflow-auto">
        <table id="supplier-table" class="table table-hover align-middle mb-0">
            <thead class="table-light">
                <tr>
                    <th>Supplier Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th>Actions</th> <!-- Thêm cột Actions -->
                </tr>
            </thead>
            <tbody>
                @if (Model.TotalItems == 0)
                {
                    <tr>
                        <td class="text-center" colspan="5">No data available.</td> <!-- Sửa lại số lượng cột -->
                    </tr>
                }
                else
                {
                    @foreach (var supplier in Model)
                    {
                        <tr>
                            <td>@supplier.SupplierName</td>
                            <td>@supplier.Email</td>
                            <td>@supplier.Phone</td>
                            <td>@supplier.Address</td>
                            <td>
                                <div class="d-flex text-breakspaces">
                                    <span class="fs-20 canedit">
                                        <a href="@Url.Action("edit", new { Id = supplier.SupplierId })">
                                            <i class="fa-solid fa-edit text-edit hover-color-secondarycolor"
                                                data-bs-toggle="tooltip" data-bs-placement="top" title="Edit"></i>
                                        </a>
                                        &nbsp;
                                    </span>
                                    <span class="fs-20 candelete"
                                        onclick="triggerDeleteConfirmationModal('@Html.Raw(supplier.SupplierName.Replace("'", "\\&#39;").Replace("\"", "\\&#34;"))','@Url.Action("delete", new { id = supplier.SupplierId })')">
                                        <i class="fa-solid fa-trash-can text-delete hover-color-secondarycolor cursor-pointer"
                                            data-bs-toggle="tooltip" data-bs-placement="top" title="Delete"></i>
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    @await Html.PartialAsync("~/Views/Shared/_Paging.cshtml", new ViewDataDictionary(ViewData)
    {
    @* { "ShowingFrom", Model.displayFrom },
    { "ShowingTo", Model.DisplayTo }, *@
    { "TotalItems", Model.TotalItems },
    { "HasPreviousPage", Model.HasPreviousPage },
    { "PageIndex", Model.PageIndex },
    { "TotalPages", Model.TotalPages },
    { "HasNextPage", Model.HasNextPage }
    })
</div>

<script>
    var tableWrapper = document.getElementById("-table-wrapper");
    var table = document.getElementById("-table");
    var tableDropDown = document.getElementById("-tableDropDown");
    if (tableWrapper != null) {
        tableWrapper.id = tableIdPrefix + "-table-wrapper";
    }
    if (table != null) {
        table.id = tableIdPrefix + "-table";
    }
    if (tableDropDown != null) {
        tableDropDown.id = tableIdPrefix + "-tableDropDown";
    }

    if (canEdit == 'False') {
        $('#' + tableIdPrefix + '-table .canedit').hide();
    }
    if (canDelete == 'False') {
        $('#' + tableIdPrefix + '-table .candelete').hide();
    }

    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    });
</script>
