@model PaginatedList<BDMPro.Models.SupplierViewModel>
@using BDMPro.Resources
@{
    string sort = ViewData["CurrentSort"].ToString();
    int calculatedFrom = (Model.PageIndex - 1) * Model.PageSize + 1;
    int calculatedTo = (Model.PageIndex - 1) * Model.PageSize + Model.PageSize;
    int displayFrom = Model.TotalItems == 0 ? 0 : calculatedFrom;
    int displayTo = (calculatedTo) > Model.TotalItems ? Model.TotalItems : (calculatedTo);
}
<div id="supplier-table-wrapper">
    <div class="table-responsive">
        <table id="supplier-table" class="table table-hover align-middle mb-0">
            <thead class="table-light">
                <tr>
                    <th>Supplier ID</th>
                    <th>Supplier Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.TotalItems == 0)
                {
                    <tr>
                        <td class="text-center" colspan="5">@Resource.NoDataAvailable</td>
                    </tr>
                }
                else
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.SupplierId</td>
                            <td>@item.SupplierName</td>
                            <td>@item.Email</td>
                            <td>@item.Phone</td>
                            <td>@item.Address</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    @await Html.PartialAsync("~/Views/Shared/_Paging.cshtml", new ViewDataDictionary(ViewData) {
    { "ShowingFrom", displayFrom }, { "ShowingTo", displayTo },
    { "TotalItems", Model.TotalItems }, { "HasPreviousPage", Model.HasPreviousPage }, { "PageIndex", Model.PageIndex },
    { "TotalPages", Model.TotalPages }, { "HasNextPage", Model.HasNextPage }
    })
</div>
<script>
    var tableWrapper = document.getElementById("supplier-table-wrapper");
    var table = document.getElementById("supplier-table");
    if (tableWrapper != null) {
        tableWrapper.id = tableIdPrefix + "-table-wrapper";
    }
    if (table != null) {
        table.id = tableIdPrefix + "-table";
    }
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    })
</script>