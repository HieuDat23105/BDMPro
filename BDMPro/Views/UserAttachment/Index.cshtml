@model BDMPro.Models.UserAttachmentListing
@using BDMPro.CustomHelper
@using BDMPro.Models
@using BDMPro.Resources
@inject Util util;
@{
    ViewBag.Module = Resource.UserAttachment;
    ViewBag.Title = Resource.UserAttachment;
    Layout = "~/Views/Shared/_LayoutAfterLogin.cshtml";
    ViewBag.TableIdPrefix = "userattachment";
    CurrentUserPermission permission = User.Identity.IsAllowed(ProjectEnum.ModuleCode.UserManagement.ToString(), util);
    List<SelectListItem> pageSizeDropDownList = UserAttachmentListConfig.PageSizeDropDownList;
    string defaultPageSizeText = pageSizeDropDownList.Where(a => a.Selected == true).Select(a => a.Text).FirstOrDefault();
    string defaultPageSizeValue = pageSizeDropDownList.Where(a => a.Selected == true).Select(a => a.Value).FirstOrDefault();
}

<div class="row">
    <div class="col-12">
        <div style="--bs-breadcrumb-divider: '>';">
            <ol class="breadcrumb m-0">
                <li class="breadcrumb-item fw-normal"><a class="color-primarycolor opacity-50" href="@Url.Action("index","user")">@Resource.UserManagement</a></li>
                <li class="breadcrumb-item fw-normal"><a class="color-primarycolor opacity-50" href="@Url.Action("viewrecord","user", new { Id = Model.UserProfileId })">@Resource.ViewUser</a></li>
                <li class="breadcrumb-item fw-normal active">@Resource.ManageUserAttachment</li>
            </ol>
        </div>
        <div class="page-title-box d-sm-flex align-items-center justify-content-between pt-2">
            <h4 class="pagetitle mb-sm-0 fw600">@Resource.ManageUserAttachment</h4>
        </div>
    </div>
</div>

<section class="section dashboard mt-3">
    <div class="bg-white rounded p-3 p-lg-4 px-lg-5 shadow">
        <h2 class="fs-20 fw600 mb-4">@Resource.ManageAttachmentsFor</h2>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3 text-break">
                    <div>@Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "fw600" })</div>
                    <div>@Html.DisplayFor(model => model.Username, new { htmlAttributes = new { @class = "form-control d-block" } })</div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3 text-break">
                    <div>@Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "fw600" })</div>
                    <div>@Html.DisplayFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })</div>
                </div>
            </div>
        </div>
    </div>
    <div class="bg-white rounded p-3 p-lg-4 px-lg-5 shadow mt-4 position-relative h-100 w-100">
        <div class="pb-2">
            <a class="btn form-btn btn-primary hover-boxshadow hover-moveup hover-bg-primarycolor" href="@Url.Action("upload", new { Id = Model.UserProfileId })"><i class="fa-solid fa-plus pe-1"></i> @Resource.UploadFiles</a>
            <span onclick="exportToExcel('@ViewBag.TableIdPrefix', '@Resource.TableIsStillLoading')" data-bs-toggle="tooltip" data-bs-placement="right" title="@Resource.ExportToExcelNote" class="btn form-btn btn-secondary hover-boxshadow cursor-pointer hover-moveup"><i class="fa-solid fa-file-excel pe-1"></i> @Resource.ExporttoExcel</span>
            <span onclick="exportToPdf('@ViewBag.TableIdPrefix', '@Resource.TableIsStillLoading')" data-bs-toggle="tooltip" data-bs-placement="right" title="@Resource.ExportToPDFNote" class="btn form-btn btn-secondary hover-boxshadow cursor-pointer hover-moveup"><i class="fa-solid fa-file-pdf pe-1"></i> @Resource.ExporttoPdf</span>
        </div>
        <div class="spinner-container d-none">
            <div class="spinner d-flex justify-content-center align-items-center text-center color-primarycolor py-5">
                <div class="py-3">
                    <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div><strong> &nbsp; @Resource.Loading </strong>
                </div>
            </div>
        </div>
        <div id="@ViewBag.TableIdPrefix-searchfilter">
            <div class="row justify-content-between align-items-end gx-1 pb-1">
                <div class="col-sm-7 col-xl-3">
                    @CustomHelper.CustomDropDown("PageSizeDropDownList", pageSizeDropDownList, false, "onChangeTableLength", defaultPageSizeText , defaultPageSizeValue)
                </div>
                <div class="col-xl-3">
                </div>
                <div class="col-xl-6 pt-2 pt-sm-0">
                    <div id="searchinput">
                        <div class="input-group flex-nowrap">
                            <input type="text" id="search" name="search" class="form-control" placeholder="@Resource.Search" />
                            <a class="input-group-text bg-transparent hover-bg-primarycolor hover-color-white cursor-pointer"
                               id="searchbtn"
                               onclick="refreshTable()"><i class="fa-solid fa-magnifying-glass pe-1"></i> @Resource.Search</a>
                            <a class="input-group-text bg-transparent hover-bg-primarycolor hover-color-white cursor-pointer" onclick="onResetButtonClicked()"><i class="fa-solid fa-rotate-left pe-1"></i> @Resource.Reset</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="@ViewBag.TableIdPrefix-mainwrapper">
            <!-- display a dummy empty table while loading the data -->
            <div class="table-responsive mb-5">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr><th class="thead"></th></tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="py-4"></div>
            <div class="dummyfooter row justify-content-between mt-5">
                <div class="col-md-6">@Resource.Showing0Entries</div>
                <div class="col-md-6 text-end">@Resource.Page0OfPage0</div>
            </div>
        </div>
    </div>
</section>

@section scripts{
    <script>
        var tableIdPrefix = "@ViewBag.TableIdPrefix";
        var fileName = "@Resource.UserAttachment"; //the file name for excel and pdf file (Export to excel, pdf feature)

        var canView = "@permission.ViewRight";
        var canAdd = "@permission.AddRight";
        var canEdit = "@permission.EditRight";
        var canDelete = "@permission.DeleteRight";

        var loadTableUrl = getLoadTableUrl(tableIdPrefix);
        var tableSearchFilter = getDefaultTableSearchFilter();

        function getLoadTableUrl(tableIdPrefix) {
            if (tableIdPrefix == "@ViewBag.TableIdPrefix") {
                return "@Url.Action("GetPartialViewUserAttachment", "UserAttachment", new{ upId = Model.UserProfileId})";
            }
            // if this page contains other tables, add load table value URL configuration here
        }

        function getDefaultTableSearchFilter() {
            return {
                //all tables
                sort: "",
                size: "",
                search: "",
                pg: ""
            };
        }

        initDropdownlist();
        $(".spinner-container").removeClass("d-none");
        loadData(loadTableUrl, tableSearchFilter, tableIdPrefix);

        function onResetButtonClicked() {
            tableSearchFilter = getDefaultTableSearchFilter();
            resetTable(tableIdPrefix);
            loadData(loadTableUrl, tableSearchFilter, tableIdPrefix);
        }

        function refreshTable() {
            $(".spinner-container").removeClass("d-none");
            var searchinput = document.querySelector(`#${tableIdPrefix}-searchfilter input[name="search"]`);
            if (searchinput != null) {
                if (searchinput.value == null || searchinput.value == "") {
                    tableSearchFilter.search = "";
                } else {
                    tableSearchFilter.search = searchinput.value;
                }
            }
            loadData(loadTableUrl, tableSearchFilter, tableIdPrefix);
        }

        function onChangeTableLength(element) {
            tableSearchFilter.size = $(element).attr('data-value');
            refreshTable();
        }

        function changePage(targetPage) {
            tableSearchFilter.pg = targetPage;
            refreshTable();
        }

        function sortTable(order) {
            tableSearchFilter.sort = order;
            refreshTable();
        }
    </script>
}